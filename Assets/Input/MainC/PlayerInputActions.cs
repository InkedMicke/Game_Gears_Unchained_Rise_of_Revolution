//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Input/MainC/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""PlayerPC"",
            ""id"": ""2fa885ff-48e9-481b-b9d3-5e7a1426bd07"",
            ""actions"": [
                {
                    ""name"": ""MovementKeyboard"",
                    ""type"": ""Value"",
                    ""id"": ""8029c7f4-b830-4a58-b24e-94fd6452cb25"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Running"",
                    ""type"": ""Button"",
                    ""id"": ""663ac221-d6f5-45a6-a7de-6a94b9da514b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MovementGamepad"",
                    ""type"": ""Value"",
                    ""id"": ""463e47dc-cd55-4f14-8397-df15044754ec"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""e32fd757-ed5e-475c-a735-c363def71f1b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""eba555ea-2adf-458d-b04c-729b2f2b9c43"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""8baef735-d104-4fcd-80cd-847ed3d6ada1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""b03f3a47-0bca-47e2-9c7c-06c1f28e0a18"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""c537018a-c2fc-45d8-a0bf-0f11952d1da9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GodMode"",
                    ""type"": ""Button"",
                    ""id"": ""d963594d-3833-4bc5-a1fc-a2fd34a9bd6a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Slow"",
                    ""type"": ""Button"",
                    ""id"": ""0f7e051d-f04c-40ba-b89a-2cebbcd53e54"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondaryAttack"",
                    ""type"": ""Button"",
                    ""id"": ""729a734c-6033-448a-8fa7-5e15e29c56d5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Test"",
                    ""type"": ""Button"",
                    ""id"": ""179f5ab3-db07-4ae3-bd98-d0f8fbc36880"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""39489e85-dd0c-4f76-8271-73b632b0863a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BastetAttack"",
                    ""type"": ""Button"",
                    ""id"": ""5fd02d06-aba1-4be0-938d-606bf5877dc8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BastetAimAttack"",
                    ""type"": ""Button"",
                    ""id"": ""ac535f69-4cfc-4156-bdb8-0ab5ff7f5f86"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeAbility"",
                    ""type"": ""Button"",
                    ""id"": ""6357323a-6323-483e-972c-ff583aab8568"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""InvokeAbility"",
                    ""type"": ""Button"",
                    ""id"": ""e4a73913-acc2-4768-abb7-4a17ad41e0a3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""8ee64b1d-2b3e-4be1-bc70-c6575a351528"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""bc48d25d-2299-437d-b01e-59c45f85928b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementKeyboard"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""dc8dd318-8de1-4652-8341-edbfe324a570"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""MovementKeyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c69cb87c-e9d4-4832-8897-7d109cba31e3"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""MovementKeyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""402ee265-a9f5-41b6-97f1-854d466f1317"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""MovementKeyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""120b9c20-e681-425e-8b9e-33a4ff3279fd"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""MovementKeyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""21e641a5-64fa-4ffa-ae8e-fefc5f9822d1"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Running"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""194ab606-d8fe-4972-ba4c-1270d1105b4f"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c5f91604-2852-4ec8-8916-f776227614ef"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f51c3f22-205b-45f7-8ae4-8515009aea81"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""edebe3c0-bb5a-4b5d-a2aa-ed60bfaf1c7a"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""SwitchWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4b358a93-4fe9-4310-ac9e-4519ab01642b"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""90f1200e-2e8f-40fd-827a-95c769df2fd7"",
                    ""path"": ""<Keyboard>/f11"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""GodMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8acf0510-d59c-41c8-839f-33726c9dcaf0"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Slow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ee7b55e5-4d21-4215-baf3-e0248cf348f3"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""SecondaryAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""252cd847-e339-495b-b7cf-129b7c845df0"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Test"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""43638489-9aa2-4126-806a-72b1351ed5f4"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9019109f-d6ef-4afb-99c1-e5aa02301e7c"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""BastetAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2c462071-7883-41c2-a4b7-bbcf67e34986"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""BastetAimAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""87a5c75c-f79c-427f-9d6a-0af4ff591739"",
                    ""path"": ""<Keyboard>/capsLock"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerGamepad"",
            ""id"": ""affe4afd-dc20-451b-8730-7685212ed02c"",
            ""actions"": [
                {
                    ""name"": ""MovementKeyboard"",
                    ""type"": ""Value"",
                    ""id"": ""d375b07b-aa70-429f-87b6-9295075ac12f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Running"",
                    ""type"": ""Button"",
                    ""id"": ""d0864d20-0d0b-4a2a-8907-02ab1985cc6e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MovementGamepad"",
                    ""type"": ""Value"",
                    ""id"": ""e52d590a-36c7-4adc-a9cc-f8155d3a3d6d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""022836b1-ad67-4a14-a734-80f41fba4f5f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""cd202755-5231-4488-b018-9c6e400ede67"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""ff46c55a-be85-4e17-8183-ee096b51c10d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""ab447f72-1d19-451f-92f8-fd6e1b2c690c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""9bcb41fd-5286-4b61-846f-832c3d680fd4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GodMode"",
                    ""type"": ""Button"",
                    ""id"": ""5d735c9c-0df1-4941-a1d3-b4b657646b1f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Slow"",
                    ""type"": ""Button"",
                    ""id"": ""2dbae06a-e2a4-43fc-8403-34b440fdb15b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondaryAttack"",
                    ""type"": ""Button"",
                    ""id"": ""f707f86a-1d08-4c10-ac19-8fe149d5a501"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Test"",
                    ""type"": ""Button"",
                    ""id"": ""524715cf-04ab-49a7-b836-a6ad4f8a5b68"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""92b8bb74-aaa5-4be7-9db8-56f3e4f9f3c4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BastetAttack"",
                    ""type"": ""Button"",
                    ""id"": ""ae5c5254-62b0-4455-b8ad-f1d4bf867f6f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BastetAimAttack"",
                    ""type"": ""Button"",
                    ""id"": ""df238ab9-d44b-4baa-982c-46f5b487424b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChargeAbility"",
                    ""type"": ""Button"",
                    ""id"": ""0c10ba25-ece0-4dd7-ac64-363270195b9a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""InvokeAbility"",
                    ""type"": ""Button"",
                    ""id"": ""0e000f24-67fc-47ff-b133-8d4efea64dd5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""c450276f-98ee-4d19-bfd3-f7f9e55ef7ee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7e11ba3d-0669-4dfc-927b-9ef72e3a7946"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Running"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4a4c24e7-d117-4034-963e-f550442ab8c2"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""MovementGamepad"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d3cb92f9-7bf6-475b-a279-1a93d9e444b9"",
                    ""path"": ""<Gamepad>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2635a938-847a-438c-9b48-449ba0ab49fb"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1941f3ea-fc17-4154-8800-b478a62ef918"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7813eb80-b0da-48eb-b976-b67e157f9e44"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""985043aa-c43e-4241-975d-d7e7d46a84b4"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""32bd11da-4945-4465-b332-fc3a4c35693d"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": ""Hold(duration=2,pressPoint=0.5)"",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""GodMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b27139e8-472d-4907-9869-313ffec7bd74"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""SecondaryAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f4098572-9a93-43c6-ba6e-221a6de4bfb8"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""SecondaryAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4360635b-cb3a-4a2e-a828-9eeb3e5452f1"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cad18391-f0c0-43be-b5da-8bb2c9cd8236"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""BastetAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c4a593bb-1665-403a-b7b0-ee5de64b6469"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""BastetAimAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2ed9e3c2-c9e2-4fd9-bd80-4f24939e2ec5"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""BastetAimAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""70b827a4-c435-4632-bfd2-18cabccb37d2"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""ChargeAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8d6ec669-9e52-47d0-9bf4-5e383fccf391"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""InvokeAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c666cb8a-1efb-48d0-bb63-1bdcb2b62b50"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""InvokeAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bcd1950a-af9e-48b0-93cb-c07be7192082"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Camera"",
            ""id"": ""c22ed1ae-f5b6-4019-9e74-0670f1324911"",
            ""actions"": [
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""9c3f1112-834d-4458-9cf1-e5fcfbc9e5f0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ce00acfc-b1d5-4b3b-b302-f700ca4f1d66"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""41bba156-dcd9-4cbc-aaf9-f662c8f6a6f4"",
            ""actions"": [
                {
                    ""name"": ""Navigate"",
                    ""type"": ""Value"",
                    ""id"": ""a3fdd19e-f462-4bcf-b2c9-fc6798f34027"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeaveUI"",
                    ""type"": ""Button"",
                    ""id"": ""915b62d2-4b9e-48f8-a562-e5bbcb704ef1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ReTab"",
                    ""type"": ""Button"",
                    ""id"": ""36e8e27a-48c3-4878-be2f-a263cd349177"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AvTab"",
                    ""type"": ""Button"",
                    ""id"": ""48cbdc2e-44db-4b80-835c-1ecbe98b9fc0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""DPad"",
                    ""id"": ""431bfc2c-7f12-4e22-947d-410dea60344c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Navigate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""658078d5-a82a-4120-8413-0e94e2ce7e2e"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b06eaabe-0cf0-4e76-9ed5-9c1ea428aca6"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""84b03d32-643d-4694-b616-8860193f07b7"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8de788ec-a73a-42ef-b4b9-99063825458c"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Navigate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a331d022-367b-4493-be40-7a850aabf376"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""LeaveUI"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""840993a6-07b1-4abc-85ba-6d99959e9f21"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""LeaveUI"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3a04986e-9197-4aac-a826-11525fbf5f0c"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""ReTab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8b237ebd-b7c6-41c3-b657-3befde5657ad"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""AvTab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Mouse"",
            ""bindingGroup"": ""Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<XInputController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PlayerPC
        m_PlayerPC = asset.FindActionMap("PlayerPC", throwIfNotFound: true);
        m_PlayerPC_MovementKeyboard = m_PlayerPC.FindAction("MovementKeyboard", throwIfNotFound: true);
        m_PlayerPC_Running = m_PlayerPC.FindAction("Running", throwIfNotFound: true);
        m_PlayerPC_MovementGamepad = m_PlayerPC.FindAction("MovementGamepad", throwIfNotFound: true);
        m_PlayerPC_Crouch = m_PlayerPC.FindAction("Crouch", throwIfNotFound: true);
        m_PlayerPC_Jump = m_PlayerPC.FindAction("Jump", throwIfNotFound: true);
        m_PlayerPC_Attack = m_PlayerPC.FindAction("Attack", throwIfNotFound: true);
        m_PlayerPC_SwitchWeapon = m_PlayerPC.FindAction("SwitchWeapon", throwIfNotFound: true);
        m_PlayerPC_Interact = m_PlayerPC.FindAction("Interact", throwIfNotFound: true);
        m_PlayerPC_GodMode = m_PlayerPC.FindAction("GodMode", throwIfNotFound: true);
        m_PlayerPC_Slow = m_PlayerPC.FindAction("Slow", throwIfNotFound: true);
        m_PlayerPC_SecondaryAttack = m_PlayerPC.FindAction("SecondaryAttack", throwIfNotFound: true);
        m_PlayerPC_Test = m_PlayerPC.FindAction("Test", throwIfNotFound: true);
        m_PlayerPC_Escape = m_PlayerPC.FindAction("Escape", throwIfNotFound: true);
        m_PlayerPC_BastetAttack = m_PlayerPC.FindAction("BastetAttack", throwIfNotFound: true);
        m_PlayerPC_BastetAimAttack = m_PlayerPC.FindAction("BastetAimAttack", throwIfNotFound: true);
        m_PlayerPC_ChangeAbility = m_PlayerPC.FindAction("ChangeAbility", throwIfNotFound: true);
        m_PlayerPC_InvokeAbility = m_PlayerPC.FindAction("InvokeAbility", throwIfNotFound: true);
        m_PlayerPC_Dash = m_PlayerPC.FindAction("Dash", throwIfNotFound: true);
        // PlayerGamepad
        m_PlayerGamepad = asset.FindActionMap("PlayerGamepad", throwIfNotFound: true);
        m_PlayerGamepad_MovementKeyboard = m_PlayerGamepad.FindAction("MovementKeyboard", throwIfNotFound: true);
        m_PlayerGamepad_Running = m_PlayerGamepad.FindAction("Running", throwIfNotFound: true);
        m_PlayerGamepad_MovementGamepad = m_PlayerGamepad.FindAction("MovementGamepad", throwIfNotFound: true);
        m_PlayerGamepad_Crouch = m_PlayerGamepad.FindAction("Crouch", throwIfNotFound: true);
        m_PlayerGamepad_Jump = m_PlayerGamepad.FindAction("Jump", throwIfNotFound: true);
        m_PlayerGamepad_Attack = m_PlayerGamepad.FindAction("Attack", throwIfNotFound: true);
        m_PlayerGamepad_SwitchWeapon = m_PlayerGamepad.FindAction("SwitchWeapon", throwIfNotFound: true);
        m_PlayerGamepad_Interact = m_PlayerGamepad.FindAction("Interact", throwIfNotFound: true);
        m_PlayerGamepad_GodMode = m_PlayerGamepad.FindAction("GodMode", throwIfNotFound: true);
        m_PlayerGamepad_Slow = m_PlayerGamepad.FindAction("Slow", throwIfNotFound: true);
        m_PlayerGamepad_SecondaryAttack = m_PlayerGamepad.FindAction("SecondaryAttack", throwIfNotFound: true);
        m_PlayerGamepad_Test = m_PlayerGamepad.FindAction("Test", throwIfNotFound: true);
        m_PlayerGamepad_Escape = m_PlayerGamepad.FindAction("Escape", throwIfNotFound: true);
        m_PlayerGamepad_BastetAttack = m_PlayerGamepad.FindAction("BastetAttack", throwIfNotFound: true);
        m_PlayerGamepad_BastetAimAttack = m_PlayerGamepad.FindAction("BastetAimAttack", throwIfNotFound: true);
        m_PlayerGamepad_ChargeAbility = m_PlayerGamepad.FindAction("ChargeAbility", throwIfNotFound: true);
        m_PlayerGamepad_InvokeAbility = m_PlayerGamepad.FindAction("InvokeAbility", throwIfNotFound: true);
        m_PlayerGamepad_Dash = m_PlayerGamepad.FindAction("Dash", throwIfNotFound: true);
        // Camera
        m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
        m_Camera_Look = m_Camera.FindAction("Look", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Navigate = m_UI.FindAction("Navigate", throwIfNotFound: true);
        m_UI_LeaveUI = m_UI.FindAction("LeaveUI", throwIfNotFound: true);
        m_UI_ReTab = m_UI.FindAction("ReTab", throwIfNotFound: true);
        m_UI_AvTab = m_UI.FindAction("AvTab", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerPC
    private readonly InputActionMap m_PlayerPC;
    private List<IPlayerPCActions> m_PlayerPCActionsCallbackInterfaces = new List<IPlayerPCActions>();
    private readonly InputAction m_PlayerPC_MovementKeyboard;
    private readonly InputAction m_PlayerPC_Running;
    private readonly InputAction m_PlayerPC_MovementGamepad;
    private readonly InputAction m_PlayerPC_Crouch;
    private readonly InputAction m_PlayerPC_Jump;
    private readonly InputAction m_PlayerPC_Attack;
    private readonly InputAction m_PlayerPC_SwitchWeapon;
    private readonly InputAction m_PlayerPC_Interact;
    private readonly InputAction m_PlayerPC_GodMode;
    private readonly InputAction m_PlayerPC_Slow;
    private readonly InputAction m_PlayerPC_SecondaryAttack;
    private readonly InputAction m_PlayerPC_Test;
    private readonly InputAction m_PlayerPC_Escape;
    private readonly InputAction m_PlayerPC_BastetAttack;
    private readonly InputAction m_PlayerPC_BastetAimAttack;
    private readonly InputAction m_PlayerPC_ChangeAbility;
    private readonly InputAction m_PlayerPC_InvokeAbility;
    private readonly InputAction m_PlayerPC_Dash;
    public struct PlayerPCActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerPCActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MovementKeyboard => m_Wrapper.m_PlayerPC_MovementKeyboard;
        public InputAction @Running => m_Wrapper.m_PlayerPC_Running;
        public InputAction @MovementGamepad => m_Wrapper.m_PlayerPC_MovementGamepad;
        public InputAction @Crouch => m_Wrapper.m_PlayerPC_Crouch;
        public InputAction @Jump => m_Wrapper.m_PlayerPC_Jump;
        public InputAction @Attack => m_Wrapper.m_PlayerPC_Attack;
        public InputAction @SwitchWeapon => m_Wrapper.m_PlayerPC_SwitchWeapon;
        public InputAction @Interact => m_Wrapper.m_PlayerPC_Interact;
        public InputAction @GodMode => m_Wrapper.m_PlayerPC_GodMode;
        public InputAction @Slow => m_Wrapper.m_PlayerPC_Slow;
        public InputAction @SecondaryAttack => m_Wrapper.m_PlayerPC_SecondaryAttack;
        public InputAction @Test => m_Wrapper.m_PlayerPC_Test;
        public InputAction @Escape => m_Wrapper.m_PlayerPC_Escape;
        public InputAction @BastetAttack => m_Wrapper.m_PlayerPC_BastetAttack;
        public InputAction @BastetAimAttack => m_Wrapper.m_PlayerPC_BastetAimAttack;
        public InputAction @ChangeAbility => m_Wrapper.m_PlayerPC_ChangeAbility;
        public InputAction @InvokeAbility => m_Wrapper.m_PlayerPC_InvokeAbility;
        public InputAction @Dash => m_Wrapper.m_PlayerPC_Dash;
        public InputActionMap Get() { return m_Wrapper.m_PlayerPC; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerPCActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerPCActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerPCActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerPCActionsCallbackInterfaces.Add(instance);
            @MovementKeyboard.started += instance.OnMovementKeyboard;
            @MovementKeyboard.performed += instance.OnMovementKeyboard;
            @MovementKeyboard.canceled += instance.OnMovementKeyboard;
            @Running.started += instance.OnRunning;
            @Running.performed += instance.OnRunning;
            @Running.canceled += instance.OnRunning;
            @MovementGamepad.started += instance.OnMovementGamepad;
            @MovementGamepad.performed += instance.OnMovementGamepad;
            @MovementGamepad.canceled += instance.OnMovementGamepad;
            @Crouch.started += instance.OnCrouch;
            @Crouch.performed += instance.OnCrouch;
            @Crouch.canceled += instance.OnCrouch;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @SwitchWeapon.started += instance.OnSwitchWeapon;
            @SwitchWeapon.performed += instance.OnSwitchWeapon;
            @SwitchWeapon.canceled += instance.OnSwitchWeapon;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @GodMode.started += instance.OnGodMode;
            @GodMode.performed += instance.OnGodMode;
            @GodMode.canceled += instance.OnGodMode;
            @Slow.started += instance.OnSlow;
            @Slow.performed += instance.OnSlow;
            @Slow.canceled += instance.OnSlow;
            @SecondaryAttack.started += instance.OnSecondaryAttack;
            @SecondaryAttack.performed += instance.OnSecondaryAttack;
            @SecondaryAttack.canceled += instance.OnSecondaryAttack;
            @Test.started += instance.OnTest;
            @Test.performed += instance.OnTest;
            @Test.canceled += instance.OnTest;
            @Escape.started += instance.OnEscape;
            @Escape.performed += instance.OnEscape;
            @Escape.canceled += instance.OnEscape;
            @BastetAttack.started += instance.OnBastetAttack;
            @BastetAttack.performed += instance.OnBastetAttack;
            @BastetAttack.canceled += instance.OnBastetAttack;
            @BastetAimAttack.started += instance.OnBastetAimAttack;
            @BastetAimAttack.performed += instance.OnBastetAimAttack;
            @BastetAimAttack.canceled += instance.OnBastetAimAttack;
            @ChangeAbility.started += instance.OnChangeAbility;
            @ChangeAbility.performed += instance.OnChangeAbility;
            @ChangeAbility.canceled += instance.OnChangeAbility;
            @InvokeAbility.started += instance.OnInvokeAbility;
            @InvokeAbility.performed += instance.OnInvokeAbility;
            @InvokeAbility.canceled += instance.OnInvokeAbility;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
        }

        private void UnregisterCallbacks(IPlayerPCActions instance)
        {
            @MovementKeyboard.started -= instance.OnMovementKeyboard;
            @MovementKeyboard.performed -= instance.OnMovementKeyboard;
            @MovementKeyboard.canceled -= instance.OnMovementKeyboard;
            @Running.started -= instance.OnRunning;
            @Running.performed -= instance.OnRunning;
            @Running.canceled -= instance.OnRunning;
            @MovementGamepad.started -= instance.OnMovementGamepad;
            @MovementGamepad.performed -= instance.OnMovementGamepad;
            @MovementGamepad.canceled -= instance.OnMovementGamepad;
            @Crouch.started -= instance.OnCrouch;
            @Crouch.performed -= instance.OnCrouch;
            @Crouch.canceled -= instance.OnCrouch;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @SwitchWeapon.started -= instance.OnSwitchWeapon;
            @SwitchWeapon.performed -= instance.OnSwitchWeapon;
            @SwitchWeapon.canceled -= instance.OnSwitchWeapon;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @GodMode.started -= instance.OnGodMode;
            @GodMode.performed -= instance.OnGodMode;
            @GodMode.canceled -= instance.OnGodMode;
            @Slow.started -= instance.OnSlow;
            @Slow.performed -= instance.OnSlow;
            @Slow.canceled -= instance.OnSlow;
            @SecondaryAttack.started -= instance.OnSecondaryAttack;
            @SecondaryAttack.performed -= instance.OnSecondaryAttack;
            @SecondaryAttack.canceled -= instance.OnSecondaryAttack;
            @Test.started -= instance.OnTest;
            @Test.performed -= instance.OnTest;
            @Test.canceled -= instance.OnTest;
            @Escape.started -= instance.OnEscape;
            @Escape.performed -= instance.OnEscape;
            @Escape.canceled -= instance.OnEscape;
            @BastetAttack.started -= instance.OnBastetAttack;
            @BastetAttack.performed -= instance.OnBastetAttack;
            @BastetAttack.canceled -= instance.OnBastetAttack;
            @BastetAimAttack.started -= instance.OnBastetAimAttack;
            @BastetAimAttack.performed -= instance.OnBastetAimAttack;
            @BastetAimAttack.canceled -= instance.OnBastetAimAttack;
            @ChangeAbility.started -= instance.OnChangeAbility;
            @ChangeAbility.performed -= instance.OnChangeAbility;
            @ChangeAbility.canceled -= instance.OnChangeAbility;
            @InvokeAbility.started -= instance.OnInvokeAbility;
            @InvokeAbility.performed -= instance.OnInvokeAbility;
            @InvokeAbility.canceled -= instance.OnInvokeAbility;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
        }

        public void RemoveCallbacks(IPlayerPCActions instance)
        {
            if (m_Wrapper.m_PlayerPCActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerPCActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerPCActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerPCActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerPCActions @PlayerPC => new PlayerPCActions(this);

    // PlayerGamepad
    private readonly InputActionMap m_PlayerGamepad;
    private List<IPlayerGamepadActions> m_PlayerGamepadActionsCallbackInterfaces = new List<IPlayerGamepadActions>();
    private readonly InputAction m_PlayerGamepad_MovementKeyboard;
    private readonly InputAction m_PlayerGamepad_Running;
    private readonly InputAction m_PlayerGamepad_MovementGamepad;
    private readonly InputAction m_PlayerGamepad_Crouch;
    private readonly InputAction m_PlayerGamepad_Jump;
    private readonly InputAction m_PlayerGamepad_Attack;
    private readonly InputAction m_PlayerGamepad_SwitchWeapon;
    private readonly InputAction m_PlayerGamepad_Interact;
    private readonly InputAction m_PlayerGamepad_GodMode;
    private readonly InputAction m_PlayerGamepad_Slow;
    private readonly InputAction m_PlayerGamepad_SecondaryAttack;
    private readonly InputAction m_PlayerGamepad_Test;
    private readonly InputAction m_PlayerGamepad_Escape;
    private readonly InputAction m_PlayerGamepad_BastetAttack;
    private readonly InputAction m_PlayerGamepad_BastetAimAttack;
    private readonly InputAction m_PlayerGamepad_ChargeAbility;
    private readonly InputAction m_PlayerGamepad_InvokeAbility;
    private readonly InputAction m_PlayerGamepad_Dash;
    public struct PlayerGamepadActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerGamepadActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MovementKeyboard => m_Wrapper.m_PlayerGamepad_MovementKeyboard;
        public InputAction @Running => m_Wrapper.m_PlayerGamepad_Running;
        public InputAction @MovementGamepad => m_Wrapper.m_PlayerGamepad_MovementGamepad;
        public InputAction @Crouch => m_Wrapper.m_PlayerGamepad_Crouch;
        public InputAction @Jump => m_Wrapper.m_PlayerGamepad_Jump;
        public InputAction @Attack => m_Wrapper.m_PlayerGamepad_Attack;
        public InputAction @SwitchWeapon => m_Wrapper.m_PlayerGamepad_SwitchWeapon;
        public InputAction @Interact => m_Wrapper.m_PlayerGamepad_Interact;
        public InputAction @GodMode => m_Wrapper.m_PlayerGamepad_GodMode;
        public InputAction @Slow => m_Wrapper.m_PlayerGamepad_Slow;
        public InputAction @SecondaryAttack => m_Wrapper.m_PlayerGamepad_SecondaryAttack;
        public InputAction @Test => m_Wrapper.m_PlayerGamepad_Test;
        public InputAction @Escape => m_Wrapper.m_PlayerGamepad_Escape;
        public InputAction @BastetAttack => m_Wrapper.m_PlayerGamepad_BastetAttack;
        public InputAction @BastetAimAttack => m_Wrapper.m_PlayerGamepad_BastetAimAttack;
        public InputAction @ChargeAbility => m_Wrapper.m_PlayerGamepad_ChargeAbility;
        public InputAction @InvokeAbility => m_Wrapper.m_PlayerGamepad_InvokeAbility;
        public InputAction @Dash => m_Wrapper.m_PlayerGamepad_Dash;
        public InputActionMap Get() { return m_Wrapper.m_PlayerGamepad; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerGamepadActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerGamepadActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerGamepadActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerGamepadActionsCallbackInterfaces.Add(instance);
            @MovementKeyboard.started += instance.OnMovementKeyboard;
            @MovementKeyboard.performed += instance.OnMovementKeyboard;
            @MovementKeyboard.canceled += instance.OnMovementKeyboard;
            @Running.started += instance.OnRunning;
            @Running.performed += instance.OnRunning;
            @Running.canceled += instance.OnRunning;
            @MovementGamepad.started += instance.OnMovementGamepad;
            @MovementGamepad.performed += instance.OnMovementGamepad;
            @MovementGamepad.canceled += instance.OnMovementGamepad;
            @Crouch.started += instance.OnCrouch;
            @Crouch.performed += instance.OnCrouch;
            @Crouch.canceled += instance.OnCrouch;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @SwitchWeapon.started += instance.OnSwitchWeapon;
            @SwitchWeapon.performed += instance.OnSwitchWeapon;
            @SwitchWeapon.canceled += instance.OnSwitchWeapon;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @GodMode.started += instance.OnGodMode;
            @GodMode.performed += instance.OnGodMode;
            @GodMode.canceled += instance.OnGodMode;
            @Slow.started += instance.OnSlow;
            @Slow.performed += instance.OnSlow;
            @Slow.canceled += instance.OnSlow;
            @SecondaryAttack.started += instance.OnSecondaryAttack;
            @SecondaryAttack.performed += instance.OnSecondaryAttack;
            @SecondaryAttack.canceled += instance.OnSecondaryAttack;
            @Test.started += instance.OnTest;
            @Test.performed += instance.OnTest;
            @Test.canceled += instance.OnTest;
            @Escape.started += instance.OnEscape;
            @Escape.performed += instance.OnEscape;
            @Escape.canceled += instance.OnEscape;
            @BastetAttack.started += instance.OnBastetAttack;
            @BastetAttack.performed += instance.OnBastetAttack;
            @BastetAttack.canceled += instance.OnBastetAttack;
            @BastetAimAttack.started += instance.OnBastetAimAttack;
            @BastetAimAttack.performed += instance.OnBastetAimAttack;
            @BastetAimAttack.canceled += instance.OnBastetAimAttack;
            @ChargeAbility.started += instance.OnChargeAbility;
            @ChargeAbility.performed += instance.OnChargeAbility;
            @ChargeAbility.canceled += instance.OnChargeAbility;
            @InvokeAbility.started += instance.OnInvokeAbility;
            @InvokeAbility.performed += instance.OnInvokeAbility;
            @InvokeAbility.canceled += instance.OnInvokeAbility;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
        }

        private void UnregisterCallbacks(IPlayerGamepadActions instance)
        {
            @MovementKeyboard.started -= instance.OnMovementKeyboard;
            @MovementKeyboard.performed -= instance.OnMovementKeyboard;
            @MovementKeyboard.canceled -= instance.OnMovementKeyboard;
            @Running.started -= instance.OnRunning;
            @Running.performed -= instance.OnRunning;
            @Running.canceled -= instance.OnRunning;
            @MovementGamepad.started -= instance.OnMovementGamepad;
            @MovementGamepad.performed -= instance.OnMovementGamepad;
            @MovementGamepad.canceled -= instance.OnMovementGamepad;
            @Crouch.started -= instance.OnCrouch;
            @Crouch.performed -= instance.OnCrouch;
            @Crouch.canceled -= instance.OnCrouch;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @SwitchWeapon.started -= instance.OnSwitchWeapon;
            @SwitchWeapon.performed -= instance.OnSwitchWeapon;
            @SwitchWeapon.canceled -= instance.OnSwitchWeapon;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @GodMode.started -= instance.OnGodMode;
            @GodMode.performed -= instance.OnGodMode;
            @GodMode.canceled -= instance.OnGodMode;
            @Slow.started -= instance.OnSlow;
            @Slow.performed -= instance.OnSlow;
            @Slow.canceled -= instance.OnSlow;
            @SecondaryAttack.started -= instance.OnSecondaryAttack;
            @SecondaryAttack.performed -= instance.OnSecondaryAttack;
            @SecondaryAttack.canceled -= instance.OnSecondaryAttack;
            @Test.started -= instance.OnTest;
            @Test.performed -= instance.OnTest;
            @Test.canceled -= instance.OnTest;
            @Escape.started -= instance.OnEscape;
            @Escape.performed -= instance.OnEscape;
            @Escape.canceled -= instance.OnEscape;
            @BastetAttack.started -= instance.OnBastetAttack;
            @BastetAttack.performed -= instance.OnBastetAttack;
            @BastetAttack.canceled -= instance.OnBastetAttack;
            @BastetAimAttack.started -= instance.OnBastetAimAttack;
            @BastetAimAttack.performed -= instance.OnBastetAimAttack;
            @BastetAimAttack.canceled -= instance.OnBastetAimAttack;
            @ChargeAbility.started -= instance.OnChargeAbility;
            @ChargeAbility.performed -= instance.OnChargeAbility;
            @ChargeAbility.canceled -= instance.OnChargeAbility;
            @InvokeAbility.started -= instance.OnInvokeAbility;
            @InvokeAbility.performed -= instance.OnInvokeAbility;
            @InvokeAbility.canceled -= instance.OnInvokeAbility;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
        }

        public void RemoveCallbacks(IPlayerGamepadActions instance)
        {
            if (m_Wrapper.m_PlayerGamepadActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerGamepadActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerGamepadActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerGamepadActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerGamepadActions @PlayerGamepad => new PlayerGamepadActions(this);

    // Camera
    private readonly InputActionMap m_Camera;
    private List<ICameraActions> m_CameraActionsCallbackInterfaces = new List<ICameraActions>();
    private readonly InputAction m_Camera_Look;
    public struct CameraActions
    {
        private @PlayerInputActions m_Wrapper;
        public CameraActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Look => m_Wrapper.m_Camera_Look;
        public InputActionMap Get() { return m_Wrapper.m_Camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void AddCallbacks(ICameraActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraActionsCallbackInterfaces.Add(instance);
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
        }

        private void UnregisterCallbacks(ICameraActions instance)
        {
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
        }

        public void RemoveCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraActions @Camera => new CameraActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_Navigate;
    private readonly InputAction m_UI_LeaveUI;
    private readonly InputAction m_UI_ReTab;
    private readonly InputAction m_UI_AvTab;
    public struct UIActions
    {
        private @PlayerInputActions m_Wrapper;
        public UIActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Navigate => m_Wrapper.m_UI_Navigate;
        public InputAction @LeaveUI => m_Wrapper.m_UI_LeaveUI;
        public InputAction @ReTab => m_Wrapper.m_UI_ReTab;
        public InputAction @AvTab => m_Wrapper.m_UI_AvTab;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @Navigate.started += instance.OnNavigate;
            @Navigate.performed += instance.OnNavigate;
            @Navigate.canceled += instance.OnNavigate;
            @LeaveUI.started += instance.OnLeaveUI;
            @LeaveUI.performed += instance.OnLeaveUI;
            @LeaveUI.canceled += instance.OnLeaveUI;
            @ReTab.started += instance.OnReTab;
            @ReTab.performed += instance.OnReTab;
            @ReTab.canceled += instance.OnReTab;
            @AvTab.started += instance.OnAvTab;
            @AvTab.performed += instance.OnAvTab;
            @AvTab.canceled += instance.OnAvTab;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @Navigate.started -= instance.OnNavigate;
            @Navigate.performed -= instance.OnNavigate;
            @Navigate.canceled -= instance.OnNavigate;
            @LeaveUI.started -= instance.OnLeaveUI;
            @LeaveUI.performed -= instance.OnLeaveUI;
            @LeaveUI.canceled -= instance.OnLeaveUI;
            @ReTab.started -= instance.OnReTab;
            @ReTab.performed -= instance.OnReTab;
            @ReTab.canceled -= instance.OnReTab;
            @AvTab.started -= instance.OnAvTab;
            @AvTab.performed -= instance.OnAvTab;
            @AvTab.canceled -= instance.OnAvTab;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_MouseSchemeIndex = -1;
    public InputControlScheme MouseScheme
    {
        get
        {
            if (m_MouseSchemeIndex == -1) m_MouseSchemeIndex = asset.FindControlSchemeIndex("Mouse");
            return asset.controlSchemes[m_MouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IPlayerPCActions
    {
        void OnMovementKeyboard(InputAction.CallbackContext context);
        void OnRunning(InputAction.CallbackContext context);
        void OnMovementGamepad(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnSwitchWeapon(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnGodMode(InputAction.CallbackContext context);
        void OnSlow(InputAction.CallbackContext context);
        void OnSecondaryAttack(InputAction.CallbackContext context);
        void OnTest(InputAction.CallbackContext context);
        void OnEscape(InputAction.CallbackContext context);
        void OnBastetAttack(InputAction.CallbackContext context);
        void OnBastetAimAttack(InputAction.CallbackContext context);
        void OnChangeAbility(InputAction.CallbackContext context);
        void OnInvokeAbility(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
    }
    public interface IPlayerGamepadActions
    {
        void OnMovementKeyboard(InputAction.CallbackContext context);
        void OnRunning(InputAction.CallbackContext context);
        void OnMovementGamepad(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnSwitchWeapon(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnGodMode(InputAction.CallbackContext context);
        void OnSlow(InputAction.CallbackContext context);
        void OnSecondaryAttack(InputAction.CallbackContext context);
        void OnTest(InputAction.CallbackContext context);
        void OnEscape(InputAction.CallbackContext context);
        void OnBastetAttack(InputAction.CallbackContext context);
        void OnBastetAimAttack(InputAction.CallbackContext context);
        void OnChargeAbility(InputAction.CallbackContext context);
        void OnInvokeAbility(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
    }
    public interface ICameraActions
    {
        void OnLook(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnNavigate(InputAction.CallbackContext context);
        void OnLeaveUI(InputAction.CallbackContext context);
        void OnReTab(InputAction.CallbackContext context);
        void OnAvTab(InputAction.CallbackContext context);
    }
}
